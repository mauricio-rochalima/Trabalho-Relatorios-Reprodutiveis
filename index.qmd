---
title: "Análise de Rede Social"
author: "Mauricio Rocha Lima Fernandes"
format: 
  html:
    
    fig-width: 20
    fig-height: 18
date: "02/01/2024"
editor: visual
lang: pt
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    collapse: false
code-block-bg: true
code-block-border-left: "#31BAE9"
toc: FALSE
code-fold: FALSE
---

------------------------------------------------------------------------

```{css, echo = FALSE}
.justify {
  text-align: justify !important
}
```

::: justify
A **Análise de redes** é uma área de estudo baseada nos **princípios da estatística e teoria dos grafos** que permite representar e visualizar um conjunto de dados para posterior investigação de suas propriedades e características [@souza_alise_2019]. De modo geral, a ARS é baseada na abordagem de Jacob Moreno, que foi responsável pela invenção do sociograma na década de 1930. O **sociograma** é a representação da rede, na qual os atores sociais são apresentados como nós e as conexões são representadas por linhas [@Recuero_2017].

As **redes sociais** são estruturas complexas formadas por uma coleção de ligações entre pessoas e entidades. [O ser humano vive em um ambiente repleto de conexões sociais]{.underline}, que são estabelecidas por meio de diversos fatores, como parentesco, língua, comércio, troca, conflito, citação e colaboração [@NodeXL_2020]. As redes podem ser definidas como pontos ligados por linhas, conforme ilustrado na @fig-rede:

![Exemplo de Grafo](img/rede.jpeg){#fig-rede}

No código abaixo, faremos a análise de bases de dados do Twitter, coletados pelo software NodeXL, cujas mensagens contenham as pelavras Educação Fianceira ou Finanças Pessoais. Nosso objetivo será o de identificar quais as principais contas que influenciam o debate sobre finanças pessoais na rede. Logo em seguida, foi realizado a renderização da base coletada, com a identificação e destaque dos maiores influenciadores na imagem gerada. Por fim, identificamos quais as principais co-hasitags que aparceram nos tweets, utilizadas para gerarem novas bases no NodeXL e passarem pela mesma análise identificada.

Disponibilizamos um [gerador dinâmico de Grafos](https://mauricio-rochalima.github.io/Trabalho-Relatorios-Reprodutiveis/Grafos.html), em que o usuário poderá selecionar tanto a base de tweets, quanto o formato do gráfico da rede para visualização. Na mesma página, após o Grafo gerado pelo usuário, disponibilizamos a tabela com todos os influenciadores financeiros identificados.
:::

------------------------------------------------------------------------

## Importação das Bases de Dados

```{r Bibliotecas, output=FALSE}


library("dplyr") #for data manipulation
library("igraph") # for social network analysis
library("ggraph") 
library(readxl)
library(tidyverse)
library(ggraph)
library(tidygraph)
library(graphlayouts)
library(ggplot2)
library(snahelper)
library(miniCRAN)
library(magrittr)
library(remotes)
library(intergraph)
library(Cairo)
library(ggrepel)
library(here)
library(knitr)
library(kableExtra)
library(tidytext)  

```

## Importação do BD

```{r echo=TRUE,output=FALSE}
c <-  here("BD","EducFin.xlsx")

edges <- read_excel(c,sheet = "Edges", skip = 1)
vertices <- read_excel(c, sheet = "Vertices", skip = 1)

Hashtag <- read_excel(c, sheet = "Overall Metrics", skip = 1)
Hashtag <- toString(Hashtag[30,2])


```

## Excluir da tabela os tweets NodeXL

```{r}


tweets <- edges
tweets <- filter(tweets,tweets$Relationship!="Tweet")
tweets <- filter(tweets,tweets$Language=="pt")

```

## Criação da matriz com as arestas

```{r}



tweets$label <- tolower(tweets$`Vertex 1`)

### Creating a data frame from the sender-receiver objects
rts.df <- tweets %>% select(`Vertex 1`,`Vertex 2`)

colnames(rts.df) <- c("rt.sender","rt.receiver")

```

## Ajustes nas tabelas para a criação do Grafo

```{r}


# Separar as contas que enviaram mensagem
sources <- rts.df %>% distinct(rt.sender) %>% rename(label=rt.sender)

# Separar as contas que receberam mensagem
destination <- rts.df %>% distinct(rt.receiver) %>% rename(label=rt.receiver)


# Criação da Tabela de Nós (Atores), incluindo chave primária para identificação dos nós
nodes <- full_join(sources, destination,by="label")
nodes <- full_join(sources, destination,by="label") %>% mutate(id = 1:nrow(nodes)) %>% select(id,everything())



# Criação da Tabela de Arestas
edges <- rts.df %>% left_join(nodes, by=c("rt.sender" = "label")) %>% rename(from="id")
edges <- edges %>% left_join(nodes,by=c("rt.receiver" = "label")) %>% rename(to=id)


edges <- select(edges,from,to)

```

## Visualização das Tabelas

## Nodes

```{r echo=FALSE}


kable(nodes,caption="Nodes", digits = 2,format = "html",align="ll") %>%

     scroll_box(height = "300px"
                
                ,box_css = "border: 1px solid #ddd; padding: 5px; "
                ,extra_css = NULL
                ,fixed_thead = TRUE
                
                ) |>
  
    kable_styling(c('hover', 'condensed', 'responsive')) %>%
  
  add_header_above(c("Tabela Nodes"="2"))
  


```

## Edges

```{r echo=FALSE}




kable(edges, digits = 2,format = "html",caption="Edges",align="ll",escape = F, table.attr='class="table-fixed-header"') %>%

     scroll_box(height = "300px"
                
                ,box_css = "border: 1px solid #ddd; padding: 5px; "
                ,extra_css = NULL
                ,fixed_thead = TRUE
                
                ) |>
  
    kable_styling(c('hover', 'condensed', 'responsive')) %>%
  
  add_header_above(c("Tabela Edges"="2"))


```

## Criação do Grafo

```{r}



net.tidy <- tbl_graph(
  nodes = nodes, edges = edges, directed = TRUE
)

```

## Criação da Tabela com as centralidades

```{r}



net.tidy <- net.tidy %>%
  activate(nodes) %>%
  mutate(PageRank = centrality_pagerank())
```

## Tabela com as centralidades

```{r message=FALSE, warning=FALSE}
# Criação da Tabela com as centralidades


net.tidy <- net.tidy %>%
  activate(nodes) %>%
  mutate(PageRank = centrality_pagerank())
# %>%
#  mutate(Betweenness = centrality_betweenness()) %>%
#  mutate(Authority = centrality_authority()) %>%
#  mutate(In_Degree = centrality_degree(mode = "in"))


# Criação da Tabela com os Nós, métricas e informações das contas
net.tidy2 <- as.data.frame(net.tidy)


users0 <- select(vertices,Vertex,Name,Description,Followers)



colnames(users0) <- c("label","user_name","descrição","N.seguidores")

net.tidy2$label <- tolower(net.tidy2$label)

w <- unique(left_join(net.tidy2,users0,by="label"))


# Filtro Usuários com mais de 1000 seguidores

w <- w %>% filter(N.seguidores >= 1000)


w <- w %>%
  select(label, user_name, descrição, PageRank, N.seguidores) %>%
  arrange(desc(PageRank))   %>%
#  mutate(N.seguidores = as.numeric(N.seguidores)) %>%
#  filter(N.seguidores > 1000)    %>%
  mutate(N.seguidores = format(N.seguidores, big.mark = ".")) %>%
  mutate(PageRank = format(PageRank, decimal.mark = ","))

colnames(w) <- c("User_Name","Usuário","Descrição","PageRank","N. Seguidores")

w <- w %>% select("Usuário","User_Name","Descrição","PageRank","N. Seguidores")

```

## Tabela com as métricas das contas capturadas

```{r echo=FALSE}




kable(w, digits = 4,format = "html",caption="Edges",align="lllrr",escape = F, table.attr='class="table-fixed-header"') %>%

     scroll_box(height = "550px"
                
                ,box_css = "border: 1px solid #ddd; padding: 5px; "
                ,extra_css = NULL
                ,fixed_thead = TRUE
                
                ) |>
  
    kable_styling(c('hover', 'condensed', 'responsive'),font_size = 16) 


```

## Gráfico de Análise das Centralidades

```{r, warning=FALSE}

l= "fr" 


set.seed(123)

g <- net.tidy %>%
  activate(nodes) %>%
  mutate(PageRank = centrality_pagerank()) %>%
  mutate(community = as.factor(group_infomap())) %>%
  ggraph(layout = l) +
  
  labs(title = Hashtag) +
  geom_edge_arc(alpha=.6,edge_width = 0.015,edge_colour = "#A8A8A8", arrow = arrow(angle = 0, length = unit(0.1, "inches"), ends = "last", type = "closed")) +
  
  geom_edge_link(width = 1, colour = "lightgray") +
  geom_node_point(aes(colour = community,size=6*PageRank)) +
  
  geom_node_text(aes(label = label,size=1.5*PageRank), colour = "#000000",repel=TRUE,
                 family = "serif",fontface = "bold") +
  scale_size(range = c(0, 15)) + 
  
  theme_graph(#foreground = 'steelblue',
               fg_text_colour = 'white') + 
  theme(legend.position = "none") 

g
```

## Identificação dos influenciadores

```{r}
c <-  here("BD","Influencers Tratados","Influencers Educação Financeira.xlsx")

influencers <- read_excel(c,sheet = "BDTrat")

```

## Visualização da Tabela Influencers

```{r echo=FALSE}




kable(influencers, digits = 4,format = "html",caption="Edges",align="lllrr",escape = F, table.attr='class="table-fixed-header"') %>%

     scroll_box(height = "550px"
                
                ,box_css = "border: 1px solid #ddd; padding: 5px; "
                ,extra_css = NULL
                ,fixed_thead = TRUE
                
                ) |>
  
    kable_styling(c('hover', 'condensed', 'responsive'),font_size = 16) 


```

## Aplicação dos Filtros de seleção

```{r warning=FALSE}

c <-  here("BD","Influencers Tratados","Influencers Educação Financeira.xlsx")

influencers <- read_excel(c,sheet = "BDTrat")

for (i in 7:11) {
  influencers <- subset(influencers, influencers[, i] != "Não" | is.na(influencers[, i]))
}


influencers <- influencers %>%
  select(User_Name,Usuário, Descrição, PageRank, `N. Seguidores`) %>%
  arrange(desc(PageRank))   %>%
  mutate(`N. Seguidores` = format(`N. Seguidores`, big.mark = ".")) %>%
  mutate(PageRank = format(PageRank, decimal.mark = ","))




```

## Visualização da Tabela com os filtros de seleção

```{r echo=FALSE}




kable(influencers, digits = 4,format = "html",align="lllrr",escape = F, table.attr='class="table-fixed-header"') %>%

     scroll_box(height = "550px"
                
                ,box_css = "border: 1px solid #ddd; padding: 5px; "
                ,extra_css = NULL
                ,fixed_thead = TRUE
                
                ) |>
  
    kable_styling(c('hover', 'condensed', 'responsive'),font_size = 16) 


```

## Redesenhando o Grafo para destacar apenas as contas localizadas

```{r}


influencers <- left_join(influencers,nodes,by=c("User_Name"="label"))

influencers

edges <- edges %>%
  filter(from %in% influencers$id | to %in% influencers$id)

edges

net.tidy <- tbl_graph(
  nodes = nodes, edges = edges, directed = TRUE
)

net.tidy <- net.tidy %>%
  activate(nodes) %>%
  mutate(PageRank = centrality_pagerank())



```

## Grafo

```{r message=FALSE, warning=FALSE}



plot_network <- function(graph, layout = "fr", Hashtag) {
  set.seed(123)
  
  g <- net.tidy %>%
    activate(nodes) %>%
    mutate(PageRank = centrality_pagerank()) %>%
    mutate(community = as.factor(group_infomap())) %>%
    ggraph(layout = layout) +
    labs(title = Hashtag) +
    geom_edge_arc(alpha=.6,edge_width = 0.015,edge_colour = "#A8A8A8", arrow = arrow(angle = 0, length = unit(0.1, "inches"), ends = "last", type = "closed")) +
    geom_edge_link(width = 1, colour = "lightgray") +
    geom_node_point(aes(colour = community,size=7*PageRank)) +
    geom_node_text(aes(label = label,size=1.45*PageRank), colour = "#000000",repel=TRUE,
                   family = "serif",fontface = "bold") +
    scale_size(range = c(0, 30)) + 
    theme_graph(fg_text_colour = 'white') + 
    theme(legend.position = "none")
  
  print(g)
}

# Escolha layout
#l="nicely"
#l="sphere" #um dos melhores
#l="circlepack"
#l= "layout fruchterman reingold"
#l= layout.fruchterman.reingold(net.tidy)
#l= "fr" #melhor opção
#l="kk"
#l="circle"
#l=layout_randomly(net.tidy)
#l="lgl"


plot_network(net.tidy,"nicely",Hashtag)
plot_network(net.tidy,"sphere",Hashtag)
plot_network(net.tidy,"circlepack",Hashtag)
plot_network(net.tidy,"fr",Hashtag)
plot_network(net.tidy,"circle",Hashtag)
plot_network(net.tidy,"kk",Hashtag)
plot_network(net.tidy,"lgl",Hashtag)
plot_network(net.tidy,layout.fruchterman.reingold(net.tidy),Hashtag)


```

## Verificação das Co-Hashtags

```{r}
tabela_A <- tweets %>%
  select(`Hashtags in Tweet`) %>%
  rename(Hashtags = `Hashtags in Tweet`)



tabela_A <- tabela_A %>%
  mutate(palavras = strsplit(Hashtags, " ")) %>%
  unnest(palavras)


tabela_A <- tabela_A %>%
  unnest_tokens(palavra, palavras) %>%
  filter(palavra != "NA")


tabela_frequencia <- tabela_A %>%
  count(palavra, sort = TRUE) %>%
  head(40)

```

## Tabela das Hashtags mais frequentes

```{r echo=FALSE}




kable(tabela_frequencia, digits = 4,format = "html",caption="Edges",align="lllrr",escape = F, table.attr='class="table-fixed-header"') %>%

     scroll_box(height = "550px"
                
                ,box_css = "border: 1px solid #ddd; padding: 5px; "
                ,extra_css = NULL
                ,fixed_thead = TRUE
                
                ) |>
  
    kable_styling(c('hover', 'condensed', 'responsive'),font_size = 16) 


```

## Hashtags mais frequentes

```{r}
p <- ggplot(tabela_frequencia,aes(x= reorder(palavra,n),n)) + geom_bar(stat ="identity",fill="#457B9D",width = .6) +
  coord_flip() +
  geom_text(size = 8, mapping = aes(label = n),hjust=-.2) +
  theme_minimal(base_size = 20) 

p <- p + theme(
  # axis.text.x=element_blank(),  #remove y axis labels
  axis.ticks.x=element_blank()  #remove y axis ticks
)


p <- p + ylab("") + xlab("")
p <- p + ggtitle("# co-hashtags mais frequentes")

p <- p + theme(panel.grid = element_blank())

#p <- p + expand_limits(y=c(0, 350))

# q <- p + theme(panel.grid = element_blank())


p <- p + theme_classic()

p <-  p + theme(axis.text.y = element_text(size = 20))

p <-  p + theme(axis.text.y = element_text(face = "italic"))

p <-  p  + scale_y_continuous(breaks = NULL) + 
  theme(plot.title = element_text(size = 22, hjust = 0.5, margin = margin(b = 20)))  # Aumentar a distância entre o título e o gráfico


p <- p + scale_x_discrete(labels = function(x) paste0("#", x))  

p

```
